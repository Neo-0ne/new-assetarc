name: Build & Push Images

on:
  workflow_dispatch:
  push:
    branches: [ main ]

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: assetarc

jobs:
  build-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Repo state (debug)
        run: |
          echo "ref: $GITHUB_REF"
          echo "ref_name: $GITHUB_REF_NAME"
          echo "sha: $GITHUB_SHA"
          echo "default origin/HEAD:" || true
          git rev-parse --abbrev-ref origin/HEAD || true
          echo "Top-level:"
          ls -la
          echo "Find service dirs at root:"
          find . -maxdepth 2 -type d -name 'P[0-9][0-9]-*' -print || true
          if [ -d services ]; then
            echo "Find service dirs under ./services:"
            find services -maxdepth 2 -type d -name 'P[0-9][0-9]-*' -print || true
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install helper deps
        run: pip install pyyaml

      # Auto-create Dockerfile/gunicorn.conf.py/wsgi.py/.dockerignore if missing
      - name: Ensure Dockerfiles exist (root + services/)
        run: |
          python3 - <<'PY'
          import os, pathlib
          ROOT = pathlib.Path('.').resolve()
          def find_code_root(p: pathlib.Path):
              cands = [d for d in p.iterdir() if d.is_dir() and (d/'app.py').exists() and (d/'requirements.txt').exists()]
              for c in cands:
                  if c.name.startswith('assetarc-'):
                      return c
              if (p/'app.py').exists() and (p/'requirements.txt').exists():
                  return p
              return cands[0] if cands else None
          DOCKERFILE = """\
          FROM python:3.11-slim
          ENV PYTHONDONTWRITEBYTECODE=1 PYTHONUNBUFFERED=1
          WORKDIR /app
          RUN apt-get update && apt-get install -y --no-install-recommends build-essential ca-certificates && rm -rf /var/lib/apt/lists/*
          COPY requirements.txt ./
          RUN pip install --no-cache-dir -r requirements.txt
          COPY . .
          RUN useradd -m appuser
          USER appuser
          EXPOSE 8000
          CMD ["gunicorn", "-c", "gunicorn.conf.py", "app:app"]
          """
          GUNICORN = """\
          import multiprocessing
          bind = "0.0.0.0:8000"
          workers = multiprocessing.cpu_count() * 2 + 1
          threads = 2
          timeout = 120
          accesslog = "-"
          errorlog = "-"
          """
          WSGI = "from app import app as application\n"
          IGNORE = "**/__pycache__/\n*.pyc\n*.pyo\n*.pyd\n.venv/\n.env\n.git/\n*.log\n*.zip\nnode_modules/\ndist/\nbuild/\n"
          candidates = []
          for root in (ROOT, ROOT/'services'):
              if not root.exists(): continue
              for d in sorted(root.glob('P[0-9][0-9]-*')):
                  if d.is_dir(): candidates.append(d)
          created = 0
          for svc in candidates:
              code = find_code_root(svc)
              if not code: continue
              for rel, content in {
                'Dockerfile': DOCKERFILE,
                'gunicorn.conf.py': GUNICORN,
                'wsgi.py': WSGI,
                '.dockerignore': IGNORE
              }.items():
                  f = code/rel
                  if not f.exists():
                      f.write_text(content, encoding='utf-8')
                      created += 1
                      print(f"[ensure] created {f}")
          print(f"[ensure] done, {created} files created/ensured across {len(candidates)} services.")
          PY

      - name: Determine image tag
        id: tag
        run: |
          if [ "${{ github.ref_name }}" = "main" ]; then
            echo "tag=main" >> $GITHUB_OUTPUT
          else
            echo "tag=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
          fi

      - name: Build & push all P## services (root + services/)
        env:
          OWNER: ${{ github.repository_owner }}
          TAG: ${{ steps.tag.outputs.tag }}
          REGISTRY: ${{ env.REGISTRY }}
          IMAGE_PREFIX: ${{ env.IMAGE_PREFIX }}
        run: |
          set -euo pipefail
          shopt -s nullglob
          # collect candidates from both locations
          roots=(P[0-9][0-9]-* services/P[0-9][0-9]-*)
          count=0
          for svc in "${roots[@]}"; do
            [ -d "$svc" ] || continue
            key=$(basename "$svc" | tr '[:upper:]' '[:lower:]')  # e.g. p01-auth
            # find code root
            code="$svc"
            sub=$(ls -d "$svc"/assetarc-* 2>/dev/null | head -n1 || true)
            if [ -n "$sub" ]; then code="$sub"; fi
            if [ ! -f "$code/Dockerfile" ]; then
              echo "::warning title=Skip::No Dockerfile at $code (after ensure). Skipping $svc."
              continue
            fi
            image="${REGISTRY}/${OWNER}/${IMAGE_PREFIX}-${key}:${TAG}"
            echo "==> Building ${image} from ${code}"
            docker buildx build --push -t "${image}" "${code}"
            count=$((count+1))
          done
          if [ "$count" -eq 0 ]; then
            echo "::error title=No services found::No P##-* service dirs found at root or ./services"
            exit 1
          fi
          echo "Built and pushed $count images."

      - name: Summary
        if: always()
        run: echo "Build & push complete (or failed above). Tag: ${{ steps.tag.outputs.tag }}"
